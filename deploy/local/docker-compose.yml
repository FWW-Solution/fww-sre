version: '3.7'
services:
  # Reverse Proxy, Dashboard and monitoring
  traefik:
    image: traefik:v2.5.4
    command:
      - '--api.insecure=true'
      - '--log.level=DEBUG'
      - '--api.dashboard=true'
      - '--metrics.prometheus=true'
      - '--metrics.prometheus.buckets=0.1,0.3,1.2,5.0'
      - '--providers.docker=true'
      - '--providers.docker.watch'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - 80:80
      - 8080:8080
    labels:
      # - "traefik.http.routers.traefik-ui.rule=Host(`${TRAEFIK_URL}`)"
      - 'traefik.http.routers.traefik-ui.service=api@internal'
      # - "traefik.http.middlewares.traefik-auth.basicauth.users=${TRAEFIK_BASIC_AUTH}"
      # - "traefik.http.middlewares.traefik-auth.basicauth.removeheader=true"
      # - "traefik.http.routers.traefik-ui.middlewares=traefik-auth"xw
    restart: unless-stopped
    logging:
      options:
        max-size: '10m'
        max-file: '3'

  whoami:
    image: traefik/whoami
    labels:
      - 'traefik.http.routers.whoami.rule=Path(`/whoami`)'
    restart: unless-stopped
    logging:
      options:
        max-size: '10m'
        max-file: '3'

  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus/:/etc/prometheus/
      - ${PROM_VOLUME}:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.size=256MB'
    labels:
      - 'traefik.http.routers.prometheus.rule=Host(`${PROM_URL}`)'
      - 'traefik.http.routers.prometheus.service=prometheus'
      # - "traefik.http.routers.prometheus.middlewares=traefik-auth"
      - 'traefik.http.services.prometheus.loadbalancer.server.port=9090'
    restart: unless-stopped
    logging:
      options:
        max-size: '10m'
        max-file: '3'

  grafana:
    image: grafana/grafana
    depends_on:
      - prometheus
    volumes:
      - ${GRAFANA_VOLUME}:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    ports:
      - 8084:3000
    environment:
      GF_SECURITY_DISABLE_INITIAL_ADMIN_CREATION: 'true'
      GF_INSTALL_PLUGINS: grafana-piechart-panel
      GF_AUTH_DISABLE_LOGIN_FORM: 'true'
      GF_AUTH_ANONYMOUS_ENABLED: 'true'
      GF_AUTH_ANONYMOUS_ORG_NAME: 'Main Org.'
      GF_AUTH_ANONYMOUS_ORG_ROLE: 'Admin'
      GF_AUTH_BASIC_ENABLED: 'false'
      GF_AUTH_DISABLE_SIGNOUT_MENU: 'true'
      GF_AUTH_PROXY_ENABLED: 'true'
      GF_USERS_ALLOW_SIGN_UP: false
    labels:
      # - 'traefik.http.routers.grafana.rule=Host(`${GRAFANA_URL}`)'
      - 'traefik.http.routers.grafana.service=grafana'
      # - "traefik.http.routers.grafana.middlewares=traefik-auth"
      - 'traefik.http.services.grafana.loadbalancer.server.port=3000'
    restart: unless-stopped
    logging:
      options:
        max-size: '10m'
        max-file: '3'
  db:
    image: postgres:14.7
    restart: always
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres
    expose:
      - 5432
    volumes:
      - ./postgres:/var/lib/postgresql/data
  portainer:
    image: portainer/portainer-ce:latest
    restart: always
    ports:
      - 8086:9000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./portainer:/data
  migrate-db:
    image: migrate/migrate
    volumes:
      - ./database/migration:/migrations
      - ./database/seeder:/sedeers
    command: -path=/migrations/ -database postgres://postgres:postgres@db:5432/postgres?sslmode=disable up 1
    links:
      - db
    depends_on:
      - db
  adminer:
    image: adminer
    restart: always
    ports:
      - 6443:8080
    depends_on:
      - db
  rabbitmq:
    image: rabbitmq:3.9.10-management
    restart: always
    ports:
      - 5672:5672
      - 15672:15672
    environment:
      RABBITMQ_DEFAULT_USER: rabbitmq
      RABBITMQ_DEFAULT_PASS: rabbitmq
  redis:
    image: redis:6.2.6
    restart: always
    expose:
      - 6379
  db-bonita:
    image: bonitasoft/bonita-postgres:12.6
    environment:
      POSTGRES_PASSWORD: example
    restart: always
    command:
      - -c
      - max_prepared_transactions=100
  bonita:
    image: bonita:2023.2
    hostname: bonita.portal
    ports:
      - 8082:8080
    environment:
      - DB_VENDOR=postgres
      - DB_HOST=db-bonita
      - DB_PORT=5432
      - DB_NAME=bonita
      - DB_USER=bonita
      - DB_PASS=bpm
      - BIZ_DB_NAME=business_data
      - BIZ_DB_USER=business_data
      - BIZ_DB_PASS=bpm
      - TENANT_LOGIN=tech_user
      - TENANT_PASSWORD=secret
      - PLATFORM_LOGIN=pfadmin
      - PLATFORM_PASSWORD=pfsecret
    restart: on-failure:2
    depends_on:
      - db-bonita
    entrypoint:
      - bash
      - -c
      - |
        set -e
        echo 'Waiting for PostgreSQL to be available'
        maxTries=10
        while [ "$$maxTries" -gt 0 ] && [ $$(echo 'QUIT' | nc -w 1 "$$DB_HOST" 5432; echo "$$?") -gt 0 ]; do
            sleep 1
            let maxTries--
        done
        if [ "$$maxTries" -le 0 ]; then
            echo >&2 'error: unable to contact Postgres after 10 tries'
            exit 1
        fi
        exec /opt/files/startup.sh /opt/bonita/server/bin/catalina.sh run
  bpm-wrapper:
    image: ghcr.io/fww-solution/bpm-wrapper:latest
    restart: always
    expose:
      - 8080
    environment:
      - DOPPLER_TOKEN=${DOPPLER_TOKEN_BPM_WRAPPER}
    depends_on:
      - bonita
      - rabbitmq
      - db
  fww-core:
    image: ghcr.io/fww-solution/fww-core:latest
    restart: always
    expose:
      - 8080
    environment:
      - DOPPLER_TOKEN=${DOPPLER_TOKEN_FWW_CORE}
    depends_on:
      - rabbitmq
      - db
      - redis
  fww-wrapper:
    image: ghcr.io/fww-solution/fww-wrapper:latest
    restart: always
    labels:
      - 'traefik.http.routers.fww-wrapper.rule=Path(`/`)'
      - 'traefik.http.routers.fww-wrapper.service=fww-wrapper'
      - 'traefik.http.services.fww-wrapper.loadbalancer.server.port=8080'
    expose:
      - 8080
    # ports:
    #   - 8082:8080
    environment:
      - DOPPLER_TOKEN=${DOPPLER_TOKEN_FWW_WRAPPER}
    depends_on:
      - rabbitmq
      - redis
      - fww-core
